{"version":3,"sources":["custom-validators.js","dependencies.js","main.js","utilities.js","components/form/js/label.js","components/form/js/stages.js","components/form/js/validation.js","components/form/field/checkbox/script.js","components/form/field/checkbox-group/script.js","components/form/field/date-or-time/script.js","components/form/field/list-of-fields/script.js","components/form/field/multiselect/script.js","components/form/field/number/script.js","components/form/field/radio-group/script.js","components/form/field/select/script.js","components/form/field/string/script.js","components/form/field/textarea/script.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;ACFA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA","file":"app.js","sourcesContent":["window.ParsleyValidator\r\n    .addValidator('ip-address', {\r\n        requirementType: 'string',\r\n        validateString: function (value) {\r\n            var ipV4Regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$/;\r\n            var ipV6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\r\n\r\n            if (!ipV4Regex.test(value)) {\r\n                return true;\r\n            }\r\n\r\n            if (ipV4Regex.test(value)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n        messages: {\r\n            en: 'This value should be a valid ip address'\r\n        }\r\n    });\r\n\r\nwindow.ParsleyValidator\r\n    .addValidator('max-decimal-points', {\r\n        requirementType: 'number',\r\n        validateString: function (value, requirement) {\r\n            return Dms.utilities.countDecimals(value) <= requirement;\r\n        },\r\n        messages: {\r\n            en: 'This value should have a maximum of %d decimal places'\r\n        }\r\n    });","$(document).ready(function () {\r\n    <!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->\r\n    $.widget.bridge('uibutton', $.ui.button);\r\n});","window.Dms = {\r\n    config: {\r\n\r\n    },\r\n    form: {\r\n        initialize: function (element) {\r\n            var callbacks = Dms.form.initializeCallbacks.concat(Dms.form.initializeValidationCallbacks);\r\n            \r\n            $.each(callbacks, function (index, callback) {\r\n                callback(element);\r\n            });\r\n        },\r\n        initializeCallbacks: [],\r\n        initializeValidationCallbacks: []\r\n    },\r\n    table: {\r\n        initialize: function (element) {\r\n            $.each(Dms.table.initializeCallbacks, function (index, callback) {\r\n                callback(element);\r\n            });\r\n        },\r\n        initializeCallbacks: []\r\n    },\r\n    utilities: {}\r\n};\r\n\r\n$(document).ready(function () {\r\n    Dms.form.initialize($(document));\r\n    Dms.table.initialize($(document));\r\n});","Dms.utilities.countDecimals = function (value) {\r\n    if (value % 1 != 0) {\r\n        return value.toString().split(\".\")[1].length;\r\n    }\r\n\r\n    return 0;\r\n};\r\n\r\nDms.utilities.guidGenerator = function() {\r\n    var S4 = function() {\r\n        return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n    };\r\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n}","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n    var fieldCounter = 1;\r\n\r\n    element.find('.dms-form-fieldset .form-group').each(function () {\r\n        var fieldLabel = $(this).children('label[data-for]');\r\n        var forFieldName = fieldLabel.attr('data-for');\r\n\r\n        if (forFieldName) {\r\n            var forField = $(this).first('*[name=\"' + forFieldName + '\"]');\r\n\r\n            if (!forField.attr('id')) {\r\n                forField.attr('id', 'dms-field-' + fieldCounter);\r\n                fieldCounter++;\r\n            }\r\n\r\n            fieldLabel.attr('for', forField.attr('id'));\r\n        }\r\n    });\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n    element.find('form.dms-staged-form').each(function () {\r\n        var form = $(this);\r\n        var amountOfStages = form.attr('data-amount-of-stages');\r\n        var stageLoadUrl = form.attr('data-stage-load-url');\r\n\r\n    });\r\n});","Dms.form.initializeValidationCallbacks.push(function (element) {\r\n\r\n    element.find('.dms-form-fields').each(function () {\r\n        if (!$(this).attr('id')) {\r\n            $(this).attr('id', Dms.utilities.guidGenerator());\r\n        }\r\n    });\r\n\r\n    element.find('.dms-form-fields').each(function () {\r\n        var formFieldsGroupId = $(this).attr('id');\r\n\r\n\r\n        var buildElementSelect = function (fieldName) {\r\n            return '#' + formFieldsGroupId + '*[type=\"' + fieldName + '\"]:input';\r\n        };\r\n\r\n        var fieldValidations = {\r\n            'data-equal-fields': 'data-parsley-equalto',\r\n            'data-greater-than-fields': 'data-parsley-gt',\r\n            'data-greater-than-or-equal-fields': 'data-parsley-gte',\r\n            'data-less-than-fields': 'data-parsley-lt',\r\n            'data-less-than-or-equal-fields': 'data-parsley-lte'\r\n        };\r\n\r\n        $.each(fieldValidations, function (validationAttr, parsleyAttr) {\r\n            var fieldsMap = $(this).attr(validationAttr);\r\n\r\n            if (fieldsMap) {\r\n                $.each(JSON.parse(fieldsMap), function (fieldName, otherFieldName) {\r\n                    $(this).find(buildElementSelect(fieldName)).attr(parsleyAttr, buildElementSelect(otherFieldName));\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    element.find('form.dms-staged-form').each(function () {\r\n        var form = $(this);\r\n        form.parsley();\r\n\r\n        form.find('.dms-form-fields').each(function (index) {\r\n            $(this).find(':input').attr('data-parsley-group', 'validation-group-' + index);\r\n        });\r\n    });\r\n\r\n    element.find('form.dms-form').each(function () {\r\n        $(this).parsley();\r\n    });\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n    element.find('.list-of-checkboxes').each(function () {\r\n        var listOfCheckboxes = $(this);\r\n\r\n        var minFields = listOfCheckboxes.attr('data-min-elements') || 0;\r\n        var maxFields = listOfCheckboxes.attr('data-max-elements') || Infinity;\r\n\r\n        listOfCheckboxes.find('input[type=checkbox]').on('click', function (e) {\r\n            var currentCount = listOfCheckboxes.find('input[type=checkbox]:checked').length;\r\n\r\n            if (currentCount >= maxFields && !$(this).is(':checked')) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    });\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n    var convertPhpDateFormatToMomentFormat = function (format) {\r\n        var replacements = {\r\n            'd': 'DD',\r\n            'D': 'ddd',\r\n            'j': 'D',\r\n            'l': 'dddd',\r\n            'N': 'E',\r\n            'S': 'o',\r\n            'w': 'e',\r\n            'z': 'DDD',\r\n            'W': 'W',\r\n            'F': 'MMMM',\r\n            'm': 'MM',\r\n            'M': 'MMM',\r\n            'n': 'M',\r\n            'o': 'YYYY',\r\n            'Y': 'YYYY',\r\n            'y': 'YY',\r\n            'a': 'a',\r\n            'A': 'A',\r\n            'g': 'h',\r\n            'G': 'H',\r\n            'h': 'hh',\r\n            'H': 'HH',\r\n            'i': 'mm',\r\n            's': 'ss',\r\n            'u': 'SSS',\r\n            'e': 'zz', // TODO: full timezone id\r\n            'O': 'ZZ',\r\n            'P': 'Z',\r\n            'T': 'zz',\r\n            'U': 'X'\r\n        };\r\n\r\n        $.each(replacements, function (phpToken, momentToken) {\r\n            format = format.replace(phpToken, momentToken);\r\n        });\r\n\r\n        return format;\r\n    };\r\n\r\n    element.find('input.date-or-time')\r\n        .each(function () {\r\n            $(this).datetimepicker({\r\n                format: convertPhpDateFormatToMomentFormat($(this).attr('data-date-format')),\r\n                minDate: $(this).attr('data-min-date') ? new Date($(this).attr('data-min-date')) : null,\r\n                maxDate: $(this).attr('data-max-date') ? new Date($(this).attr('data-max-date')) : null,\r\n                useCurrent: !$(this).attr('data-dont-use-current')\r\n            });\r\n        });\r\n\r\n    element.find('.date-or-time-range')\r\n        .each(function () {\r\n            var startInput = $(this).find('input.date-or-time.start-input');\r\n            var endInput = $(this).find('input.date-or-time.end-input');\r\n\r\n            startInput.on(\"dp.change\", function (e) {\r\n                endInput.data(\"DateTimePicker\").minDate(e.date);\r\n            });\r\n\r\n            endInput.on(\"dp.change\", function (e) {\r\n                startInput.data(\"DateTimePicker\").maxDate(e.date);\r\n            });\r\n        });\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n    element.find('ul.list-field').each(function () {\r\n        var listOfFields = $(this);\r\n        var templateField = $(this).find('.list-field-template');\r\n        var addButton = $(this).find('.btn-add-field');\r\n        var isInvalidating = false;\r\n\r\n        var minFields = listOfFields.attr('data-min-elements');\r\n        var maxFields = listOfFields.attr('data-max-elements');\r\n\r\n        var getAmountOfInputs = function () {\r\n            return listOfFields.children('.list-field-item').length;\r\n        };\r\n\r\n        var invalidateControl = function () {\r\n            if (isInvalidating) {\r\n                return;\r\n            }\r\n\r\n            isInvalidating = true;\r\n\r\n            var amountOfInputs = getAmountOfInputs();\r\n\r\n            addButton.prop('disabled', getAmountOfInputs() >= maxFields);\r\n            listOfFields.find('.btn-remove-field').prop('disabled', getAmountOfInputs() <= minFields);\r\n\r\n            while (amountOfInputs < minFields) {\r\n                addNewField();\r\n                amountOfInputs++;\r\n            }\r\n\r\n            isInvalidating = false;\r\n        };\r\n\r\n        var addNewField = function () {\r\n            listOfFields.append(\r\n                templateField.clone()\r\n                    .removeClass('list-field-template')\r\n                    .addClass('list-field-item')\r\n            );\r\n\r\n            invalidateControl();\r\n        };\r\n\r\n        listOfFields.on('click', '.btn-remove-field', function () {\r\n            $(this).closest('.list-field-item').remove();\r\n\r\n            invalidateControl();\r\n        });\r\n\r\n        invalidateControl();\r\n\r\n        if (minFields !== null && minFields === maxFields) {\r\n            addButton.closest('.list-field-add').remove();\r\n            listOfFields.find('.btn-remove-field').remove();\r\n        }\r\n    });\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n    element.find('select[multiple]').multiselect({\r\n        enableFiltering: true,\r\n        includeSelectAllOption: true\r\n    });\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n    element.find('input[type=\"number\"][data-max-decimal-places]').each(function () {\r\n        $(this).attr('data-parsley-max-decimal-places', $(this).attr('data-max-decimal-places'));\r\n    });\r\n\r\n    element.find('input[type=\"number\"][data-greater-than]').each(function () {\r\n        $(this).attr('data-parsley-gt', $(this).attr('data-greater-than'));\r\n    });\r\n\r\n    element.find('input[type=\"number\"][data-less-than]').each(function () {\r\n        $(this).attr('data-parsley-lt', $(this).attr('data-less-than'));\r\n    });\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n    element.find('input[type=\"ip-address\"]')\r\n        .attr('type', 'text')\r\n        .attr('data-parsley-ip-address', '1');\r\n});","Dms.form.initializeCallbacks.push(function (element) {\r\n\r\n});"],"sourceRoot":"/source/"}